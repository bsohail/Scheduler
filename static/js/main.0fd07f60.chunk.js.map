{"version":3,"sources":["components/scheduleMaker/Scheduler.js","components/about/About.js","App.js","serviceWorker.js","index.js"],"names":["StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","StyledTableRow","root","action","hover","TableRow","createData","time","monday","tuesday","wednesday","thursday","friday","rows","useStyles","makeStyles","table","minWidth","tableRightBorder","borderWidth","borderRightWidth","borderColor","borderStyle","Scheduler","classes","Container","maxWidth","TableContainer","component","Paper","style","maxHeight","Table","classtime","aria-label","TableHead","align","TableBody","map","row","key","className","textAlign","About","React","Component","App","AppBar","position","Toolbar","Grid","justify","container","spacing","item","Typography","variant","noWrap","Button","href","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0fd07f60.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 11,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\nfunction createData(time, monday, tuesday, wednesday, thursday, friday) {\r\n  return { time, monday, tuesday, wednesday, thursday, friday };\r\n}\r\n\r\nconst rows = [\r\n  createData('08.00'),\r\n  createData('09.00'),\r\n  createData('10.00'),\r\n  createData('11.00'),\r\n  createData('12.00'),\r\n  createData('13.00'),\r\n  createData('14.00'),\r\n  createData('15.00'),\r\n  createData('16.00'),\r\n  createData('17.00'),\r\n  createData('18.00'),\r\n  createData('19.00'),\r\n  createData('20.00'),\r\n  createData('21.00'),\r\n  createData('22.00'),\r\n];\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 600,\r\n  },\r\n  tableRightBorder: {\r\n        borderWidth: 0,\r\n        borderRightWidth: 1,\r\n        borderColor: 'black',\r\n        borderStyle: 'solid',\r\n    },\r\n});\r\n\r\nfunction Scheduler () {\r\n\r\n\r\nconst classes = useStyles();\r\n    return (\r\n\t<Container maxWidth=\"md\">\r\n      <h2>\r\n        Schedule maker\r\n      </h2>\r\n<TableContainer component={Paper} style={{maxHeight:600}}>\r\n      <Table classtime={classes.table} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell align=\"center\" >Time</StyledTableCell>\r\n            <StyledTableCell align=\"center\">Mon</StyledTableCell>\r\n            <StyledTableCell align=\"center\">Tue</StyledTableCell>\r\n            <StyledTableCell align=\"center\">Wed</StyledTableCell>\r\n            <StyledTableCell align=\"center\">Thu</StyledTableCell>\r\n            <StyledTableCell align=\"center\">Fri</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <StyledTableRow key={row.time}>\r\n              <StyledTableCell align=\"center\" className={classes.tableRightBorder}>{row.time}</StyledTableCell>\r\n\r\n              <StyledTableCell align=\"right\" className={classes.tableRightBorder}>{row.monday}</StyledTableCell>\r\n              <StyledTableCell align=\"right\" className={classes.tableRightBorder}>{row.tuesday}</StyledTableCell>\r\n              <StyledTableCell align=\"right\" className={classes.tableRightBorder}>{row.wednesday}</StyledTableCell>\r\n              <StyledTableCell align=\"right\" className={classes.tableRightBorder}>{row.thursday}</StyledTableCell>\r\n              <StyledTableCell align=\"right\" >{row.friday}</StyledTableCell>\r\n            </StyledTableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n    <br/>\r\n    <h5 style={{textAlign:'center'}}>Nitin Ramesh, Bilal Sohail 2020</h5>\r\n\t</Container>\r\n    );\r\n  }\r\n\r\n\r\nexport default Scheduler;\r\n","import React from \"react\";\r\nimport Container from '@material-ui/core/Container';\r\nclass About extends React.Component {\r\n  render() {\r\n    return (\r\n\t<Container maxWidth=\"md\">\r\n      <h2>\r\n        About page\r\n      </h2>\r\n\t</Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Scheduler from './components/scheduleMaker/Scheduler';\nimport About from './components/about/About';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nexport default function App() {\n  return (\n    <Router>\n      <div>\n\t<AppBar position=\"static\" style={{backgroundColor:'#005596'}}>\n        <Toolbar>\n\t<Grid\n      justify=\"space-between\"\n      container\n      spacing={24}\n    >\n\t<Grid item>\n          <Typography variant=\"h6\" noWrap>\n            Generic Uni logo\n          </Typography>\n\t</Grid>\n\t<Grid item>\n\t\t<Button variant=\"outlined\" color=\"default\" style={{color:'#FFCE00'}} href=\"/\">Schedule maker</Button>\n\t\t<Button variant=\"outlined\" color=\"default\" style={{color:'#FFCE00'}} href=\"/about\">About</Button>\n\t</Grid>\n\t</Grid>\n        </Toolbar>\n      </AppBar>\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\">\n            <Scheduler />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}